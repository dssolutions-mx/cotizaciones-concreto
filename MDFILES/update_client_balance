DECLARE
    v_total_orders numeric := 0;
    v_total_payments numeric := 0;
    v_general_credit numeric := 0;
    v_current_balance numeric := 0;
    v_balance_record_exists boolean;
    v_has_distributions boolean;
BEGIN
    -- Verificar si existen distribuciones de pagos
    SELECT EXISTS(
        SELECT 1 FROM client_payment_distributions LIMIT 1
    ) INTO v_has_distributions;

    -- Calcular el total de órdenes para el cliente/obra
    SELECT COALESCE(SUM(
        CASE 
            WHEN orders.final_amount IS NOT NULL THEN 
                CASE WHEN orders.requires_invoice THEN orders.final_amount * 1.16 ELSE orders.final_amount END
            ELSE 0
        END
    ), 0) INTO v_total_orders
    FROM orders
    WHERE orders.client_id = p_client_id
    AND (p_site_name IS NULL OR orders.construction_site = p_site_name)
    AND orders.credit_status = 'approved'
    AND orders.order_status NOT IN ('cancelled')
    AND EXISTS (
        SELECT 1 FROM remisiones 
        WHERE remisiones.order_id = orders.id
    );
    
    -- Calcular el total de pagos usando la distribución (si existe la tabla) o el método anterior
    IF v_has_distributions THEN
        IF p_site_name IS NULL THEN
            -- Para balance general, sumar todas las distribuciones
            SELECT COALESCE(SUM(cpd.amount), 0) INTO v_total_payments
            FROM client_payment_distributions cpd
            JOIN client_payments cp ON cp.id = cpd.payment_id
            WHERE cp.client_id = p_client_id;
        ELSE
            -- Para balance por obra, solo distribuciones para esa obra
            SELECT COALESCE(SUM(cpd.amount), 0) INTO v_total_payments
            FROM client_payment_distributions cpd
            JOIN client_payments cp ON cp.id = cpd.payment_id
            WHERE cp.client_id = p_client_id
            AND cpd.construction_site = p_site_name;
            
            -- Check if client has general credit (negative balance)
            SELECT 
                CASE 
                    WHEN current_balance < 0 THEN ABS(current_balance)
                    ELSE 0
                END INTO v_general_credit
            FROM client_balances
            WHERE client_id = p_client_id
            AND construction_site IS NULL;
            
            -- Si estamos calculando el balance de una obra específica y hay crédito general,
            -- aplicar ese crédito al balance de la obra (hasta el límite del crédito disponible)
            IF v_general_credit > 0 THEN
                -- Agregar el crédito general a los pagos de esta obra
                v_total_payments := v_total_payments + LEAST(v_general_credit, v_total_orders);
            END IF;
        END IF;
    ELSE
        -- Método anterior si no existe la tabla de distribuciones
        SELECT COALESCE(SUM(client_payments.amount), 0) INTO v_total_payments
        FROM client_payments
        WHERE client_payments.client_id = p_client_id
        AND (
            (p_site_name IS NULL AND (client_payments.construction_site IS NULL OR client_payments.construction_site = '')) 
            OR 
            (p_site_name IS NOT NULL AND client_payments.construction_site = p_site_name)
        );
        
        -- Si estamos calculando para una obra específica, verificar si hay crédito general
        IF p_site_name IS NOT NULL THEN
            SELECT 
                CASE 
                    WHEN current_balance < 0 THEN ABS(current_balance)
                    ELSE 0
                END INTO v_general_credit
            FROM client_balances
            WHERE client_id = p_client_id
            AND construction_site IS NULL;
            
            IF v_general_credit > 0 THEN
                -- Agregar el crédito general a los pagos de esta obra
                v_total_payments := v_total_payments + LEAST(v_general_credit, v_total_orders);
            END IF;
        END IF;
    END IF;
    
    -- Calcular balance actual
    v_current_balance := v_total_orders - v_total_payments;
    
    -- Verificar si ya existe registro de balance
    SELECT EXISTS(
        SELECT 1 FROM client_balances 
        WHERE client_balances.client_id = p_client_id
        AND (
            (p_site_name IS NULL AND client_balances.construction_site IS NULL) OR
            (p_site_name IS NOT NULL AND client_balances.construction_site = p_site_name)
        )
    ) INTO v_balance_record_exists;
    
    -- Actualizar o insertar registro de balance
    IF v_balance_record_exists THEN
        UPDATE client_balances
        SET 
            current_balance = v_current_balance,
            last_updated = timezone('utc'::text, now())
        WHERE client_balances.client_id = p_client_id
        AND (
            (p_site_name IS NULL AND client_balances.construction_site IS NULL) OR
            (p_site_name IS NOT NULL AND client_balances.construction_site = p_site_name)
        );
    ELSE
        INSERT INTO client_balances (client_id, construction_site, current_balance)
        VALUES (p_client_id, p_site_name, v_current_balance);
    END IF;
END; 